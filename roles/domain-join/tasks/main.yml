---
# tasks file for domain-join
# this task joins an ubuntu machine to the active directory domain
- name: Include encrypted variables.
  include_vars: vault.yml

- name: Install packages required to join an ubuntu vm to the domain
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ required_packages }}"

- name: Test active directory domain connection
  shell: "realm discover {{ domain_name }}"
  register: realm_discover_results
  changed_when: false

- name: Discover realm debug
  debug:
    var: realm_discover_results
    verbosity: 1

- name: Check to see if the system is already joined to AD
  shell: "realm list"
  register: realm_list_results
  changed_when: false

- name: Debug realm_list_results
  debug:
    var: realm_list_results
    verbosity: 1

- name: Join system to AD
  expect:
    command: /bin/bash -c "/usr/sbin/realm join {{ domain_name }} --user={{ ad_admin_user }} --computer-ou='{{ ad_computer_ou }}'"
    responses:
      (?i)Password: "{{ ad_admin_password }}"
  register: join_results
  when: not realm_list_results.stdout

#This debug step will only fire if the system needs to join the realm but fails
- name: Debug join
  debug:
    var: join_results
  when: not realm_list_results.stdout and join_results

# Unfortunately the privilege escalation GPO is availalbe for Ubuntu Pro users only,
# so we resort back to the good ol' sudoers file.
#TODO: Figure out a way to variabalize the group
- name: Add Ubuntu Admins group to sudoers.
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^%ubuntu'
    line: '%ubuntu\ admins ALL=(ALL:ALL) ALL'
    validate: 'visudo -cf %s'

- name: Change fully qualified domain name setting in sssd.conf
  lineinfile:
    path: "{{ sssd_conf_path }}"
    regexp: use_fully_qualified_names
    line: "use_fully_qualified_names = {{ use_fully_qualified_names }}"
  notify: Restart sssd

- name: Enable home folder creation for domain users (when configured)
  shell: "pam-auth-update --enable mkdir"
  when: home_folder_auto_creation
  changed_when: false

- name: Flush handlers to restart sssd if necessary
  meta: flush_handlers

# Unfortunately the home folder creation isn't working for me, so create them manually
- name: Create the home directories
  file:
    path: "/home/{{ item }}@{{ domain_name | lower }}"
    owner: "{{ item }}"
    group: "domain users"
    mode: '0750'
    state: directory
  with_items: "{{ home_dir_users }}"
  when: create_home_dirs

- name: Finally, install krb5-user so that we can utilize kerberos tickets
  package:
    name: krb5-user
    state: present